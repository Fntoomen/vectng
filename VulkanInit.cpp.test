#include <SDL2/SDL.h>
#include <SDL2/SDL_vulkan.h>
#include <vector>

uint32_t extensionCount;
SDL_Vulkan_GetInstanceExtensions(window, &extensionCount, nullptr);
std::vector<const char *> extensionNames(extensionCount);
SDL_Vulkan_GetInstanceExtensions(window, &extensionCount, extensionNames.data());

VkApplicationInfo appInfo {};
// TODO: fill this out

std::vector<const char *> layerNames {};
// uncomment below if you want to use validation layers
// layerNames.push_back("VK_LAYER_LUNARG_standard_validation");

VkInstanceCreateInfo info {};
info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
info.pApplicationInfo = &appInfo;
info.enabledLayerCount = layerNames.size();
info.ppEnabledLayerNames = layerNames.data();
info.enabledExtensionCount = extensionNames.size();
info.ppEnabledExtensionNames = extensionNames.data();

VkResult res;
VkInstance instance;
res = vkCreateInstance(&info, nullptr, &instance);
if (res != VK_SUCCESS) {
  // do some error checking
}